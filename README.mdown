Flow Scroll
==================

![Screen shot](https://github.com/hugowetterberg/FlowScroll/raw/master/pictures/screen.png "The view in action")
![Screen shot](https://github.com/hugowetterberg/FlowScroll/raw/master/pictures/screen-loading.png "Activity indicator when loading")

HUWFlow is a UIScrollView subclass for creating a simple cover flow-esque scroll view. The HUWFlowDelegate protocol can be used to recieve notifications when an image was selected or failed to load. Images are loaded asynchronously in a background queue. The default limit for max concurrent loaders is 2 but this can be changed through the maxConcurrentImageLoaders property.

Sample usage
--------------------

Sample usage from HUWViewController.m where the scrollView property is connected to a HUWFlow scroll view. Adds an image that's supposed to fail, to demonstrate the delegate fallback. And then adds the images specified in our json-file. The two delegate methods at the end should be self explanatory.

    - (void)viewDidLoad
    {
        [super viewDidLoad];

        self.scrollView.flowDelegate = self;
        [self.scrollView addImageWithUrl:[NSURL URLWithString:@"http://example.com/nosuchimage.png"]];

        NSArray *json = [NSJSONSerialization JSONObjectWithData:[NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"images" ofType:@"json"]] options:0 error:nil];
        for (NSDictionary *info in json) {
            NSURL *imageUrl = [[NSBundle mainBundle] URLForResource:[info objectForKey:@"name"] withExtension:@"jpg"];
            [self.scrollView addImageWithUrl:imageUrl];
        }
    }

    -(void)flowDidSelectItem:(int)index {
        NSLog(@"Selected image #%d", index);
    }

    -(UIImage *)flowFailedToLoadImage:(int)index withError:(NSError *)error {
        NSLog(@"%@", error);
        return [UIImage imageNamed:@"Elizabeth_Stanton.png"];
    }

Custom loaders with addImageWithLoader:
-------------------------------------------

The addImageWithUrl: method uses addImageWithLoader: internally. The loader block is always executed on a background thread and an activity indicator is shown while loading.

    [self addImageWithLoader:^UIImage *(NSError *__autoreleasing *error) {
        UIImage *image = nil;
        NSData *data = [NSData dataWithContentsOfURL:url options:0 error:error];
        if (!*error) {
            image = [UIImage imageWithData:data];
            if (!image) {
                *error = [NSError errorWithDomain:@"nu.wetterberg.Flow" code:0 userInfo:[NSDictionary dictionaryWithObjectsAndKeys:@"Could not read image", NSLocalizedDescriptionKey, nil]];
            }
        }
        return image;
    }];
